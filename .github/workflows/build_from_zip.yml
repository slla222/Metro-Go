name: Build from ZIP (AAB + APK)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Python (for data convert)
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Unzip project
        run: |
          unzip -q "MetroAlarm_OneClickBuild_v3.zip" -d workspace
          ls -la workspace
          ls -la workspace/MetroAlarm

      - name: Fetch full Moscow metro SVG map (Wikimedia)
        run: |
          mkdir -p workspace/MetroAlarm/app/src/main/assets
          curl -L "https://commons.wikimedia.org/wiki/Special:FilePath/Moscow%20metro%20map%20sb.svg" -o workspace/MetroAlarm/app/src/main/assets/metro_map.svg
          echo "Attribution: Moscow metro map sb.svg — Wikimedia Commons — CC BY-SA 4.0" > workspace/MetroAlarm/ATTRIBUTION.txt

      - name: Fetch stations (Wikidata SPARQL → CSV)
        run: |
          Q=$(cat << 'EOF'
          SELECT ?line ?lineLabel ?station ?stationLabel ?coord ?ordinal WHERE {
            ?line wdt:P31/wdt:P279* wd:Q728937; wdt:P361 wd:Q5499.
            ?station wdt:P31/wdt:P279* wd:Q928830; wdt:P625 ?coord.
            ?line p:P527 ?part. ?part ps:P527 ?station.
            OPTIONAL { ?part pq:P1545 ?ordinal }
            SERVICE wikibase:label { bd:serviceParam wikibase:language "ru,en". }
          } ORDER BY ?lineLabel (xsd:integer(?ordinal))
          EOF
          )
          python - << 'PY'
import urllib.parse, urllib.request, os, pathlib
q = os.environ.get("Q")
url = "https://query.wikidata.org/sparql?format=csv&" + urllib.parse.urlencode({"query": q})
csv = urllib.request.urlopen(url).read()
pathlib.Path("workspace/MetroAlarm/tools").mkdir(parents=True, exist_ok=True)
open("workspace/MetroAlarm/tools/wikidata_metro.csv","wb").write(csv)
print("Downloaded CSV:", len(csv))
PY

      - name: Convert CSV → JSON graph for app
        run: |
          python workspace/MetroAlarm/tools/convert_stations.py \
            workspace/MetroAlarm/tools/wikidata_metro.csv \
            workspace/MetroAlarm/tools/wikidata_metro.csv \
            workspace/MetroAlarm/app/src/main/assets/stations_moscow_full.json

      - name: Prepare signing (auto keystore if secrets absent)
        run: |
          cd workspace/MetroAlarm
          if [ -z "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" ]; then
            keytool -genkeypair -noprompt -alias upload -dname "CN=MetroAlarm,O=User,C=PL" \
              -keyalg RSA -keysize 2048 -validity 20000 \
              -storetype JKS -keystore upload-keystore.jks \
              -storepass android -keypass android
          else
            echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > upload-keystore.jks
          fi
          {
            echo "MYAPP_UPLOAD_STORE_FILE=upload-keystore.jks"
            echo "MYAPP_UPLOAD_KEY_ALIAS=upload"
            echo "MYAPP_UPLOAD_STORE_PASSWORD=android"
            echo "MYAPP_UPLOAD_KEY_PASSWORD=android"
            echo "storeFile=${{ github.workspace }}/workspace/MetroAlarm/upload-keystore.jks"
          } >> ~/.gradle/gradle.properties
          chmod +x gradlew

      - name: Build Release AAB
        run: |
          cd workspace/MetroAlarm
          ./gradlew :app:bundleRelease

      - name: Build Debug APK
        run: |
          cd workspace/MetroAlarm
          ./gradlew assembleDebug

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: metroalarm-oneclick-build
          path: |
            workspace/MetroAlarm/app/build/outputs/bundle/release/*.aab
            workspace/MetroAlarm/app/build/outputs/apk/debug/*.apk
            workspace/MetroAlarm/upload-keystore.jks
            workspace/MetroAlarm/ATTRIBUTION.txt
